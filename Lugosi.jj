// FUNCOES ADICIONADAS NAO REQUISITADAS: ELSE, >, <, !

PARSER_BEGIN(Lugosi)
import java.io.*;
import java.util.*;
import java.io.FileWriter;
import java.io.IOException;
  
  // CONSTRUCAO DA ARVORE
class ArvoreLugosi{
  Main main;
  ArrayList<Func> func;

  ArvoreLugosi(Main m, ArrayList<Func> f){
    this.main=m;
    this.func=f;
  }
}
// FIM CONSTRUCAO DA ARVORE

// MAIN
class Main{
  ArrayList <Vardecl> vardecl;
  ArrayList<Comandos> seqcom;

  Main(ArrayList<Vardecl> v, ArrayList<Comandos> sc){
    this.vardecl=v;
    this.seqcom=sc;
  }
}
// FIM MAIN

// VARDECL
class Vardecl{
  String tipo;
  String var;

  Vardecl(String t, String v){
    this.tipo=t;
    this.var=v;
  }
}
//FIM VARDECL


class Comandos{}

class Atribuicao extends Comandos{
  String var;
  Exp exp;

  Atribuicao(String v, Exp e){
    this.var=v;
    this.exp=e;
  }
}

class Print extends Comandos{
  Exp exp;

  Print(Exp e){
    this.exp=e;
  }
}

class Return extends Comandos{
  Exp exp;

  Return(Exp e){
    this.exp=e;
  }
}

class If extends Comandos{
  Exp exp;
  ArrayList<Comandos> seqcom;

  If(Exp e, ArrayList<Comandos> s){
    this.exp=e;
    this.seqcom=s;
  }
}

class While extends Comandos{
  Exp exp;
  ArrayList<Comandos> seqcom;

  While(Exp e, ArrayList<Comandos> s){
    this.exp=e;
    this.seqcom=s;
  }
}

class DoWhile extends Comandos{
  Exp exp;
  ArrayList<Comandos> seqcom;

  DoWhile(Exp e, ArrayList<Comandos> s){
    this.exp=e;
    this.seqcom=s;
  }
}


class Exp{}

class Operation extends Exp{
  Exp exp1;
  String op;
  Exp exp2;

  Operation(Exp e1, String o, Exp e2){
    this.exp1=e1;
    this.op=o;
    this.exp2=e2;
  }
}

class Fator_Id extends Exp{
  String id;

  Fator_Id(String s){
    this.id = s;
    //System.out.println(this.id);
  }
}

class Fator_Num extends Exp{
  String num;

  Fator_Num(String n){
    this.num = n;
  }
}

class Fator_Bool extends Exp{
  String state;

  Fator_Bool(String s){
    this.state = s;
  }
}

class Fator_Lista extends Exp{
  String id;
  ArrayList <Exp> lista;

  Fator_Lista(String s, ArrayList<Exp> l){
    this.id = s;
    this.lista = l;
    //System.out.println(id);
  }
}



class Func{
  String tipo;
  String id;
  ArrayList <ListaArg> listaarg;
  ArrayList <Vardecl> vardecl;
  ArrayList <Comandos> seqcom;

  Func(String t, String i, ArrayList<ListaArg> l, ArrayList<Vardecl> v, ArrayList<Comandos> c){
    this.tipo = t;
    this.id = i;
    this.listaarg = l;
    this.vardecl = v;
    this.seqcom = c;
  }
}

class ListaArg{
  String tipo;
  String id;

  ListaArg(String t, String i){
    this.tipo = t;
    this.id = i;
  }
}


public class Lugosi {
  
  public static void main(String args[]) throws Exception{
    // abrir o arquivo passado por linha
    // de comando contento o código em Lugosi:
    FileInputStream fs = new FileInputStream(new File(args[0]));

    // Instanciar o parser da linguagem Lugosi passando
    // como argumento o arquivo contendo o código
    //Lugosi a ser processado:
    Lugosi parser = new Lugosi(fs);

    // Chamar a primeira regra do parser que irá
    // analisar o código e devolver a árvore sintática
    ArvoreLugosi arvore =parser.Lugosi();

    // passar a árvore para o gerador de código
    // que deve gerar um arquivo .java com o mesmo
    //nome do arquivo de entrada
    geraCodigo(arvore, args[0]);
  }
  public static void geraCodigo(ArvoreLugosi prog, String arquivo){
    String msg = "";
    if(prog instanceof ArvoreLugosi){
      arquivo = arquivo.replace(".lug","");
      msg +="import java.io.*;\npublic class " + arquivo + "{";

      for(Vardecl v: prog.main.vardecl){
        if (v.tipo == "bool"){
          msg += "boolean" + " " + v.var + ";";
        }
        else{
          msg += v.tipo + " " + v.var + ";";
        }
      }
      msg += catchSeqComandos(prog.main.seqcom);

      msg += "}";
    }

    try {
      FileWriter myWriter = new FileWriter(arquivo + ".java");
      myWriter.write(msg);
      myWriter.close();
      System.out.println("Successfully wrote to the file.");
    } catch (IOException e) {
      System.out.println("An error occurred.");
      e.printStackTrace();
    }
  }

  public static String catchSeqComandos(ArrayList<Comandos> seqcom){
    String msg = "";
    for(Comandos c: seqcom){
        if(c instanceof Print){
          msg += "System.out.println(";
          msg += ");";
        }
        else{ if(c instanceof If){
          msg += "if(";
          Exp e = ((If) c).exp;
          msg += catchExp(e);
          msg += "){";
          msg += catchSeqComandos(((If) c).seqcom);
          msg += "};";
        }
        else{ if(c instanceof While){
          msg += "while(";
          msg += "){";
          msg += "}";
        }
        else{ if(c instanceof DoWhile){
          msg += "do{";
          msg += "}while(";
          msg += ");";
        }
        else{ if(c instanceof Return){
          msg += "return ";
          msg += ";";
        }
        else{ if(c instanceof Atribuicao){
          msg += ((Atribuicao) c).var;
          msg += "=";
          msg += catchExp(((Atribuicao) c).exp);
          msg += ";";
        }
      }}}}}}

      return msg;
  }

  public static String catchExp(Exp e){
    String msg = "";
    if(e instanceof Fator_Id){
      msg += ((Fator_Id)e).id;
    }
    else{ if(e instanceof Fator_Num){
      msg += ((Fator_Num)e).num;
    }
    else{ if(e instanceof Fator_Bool){
      msg += ((Fator_Bool)e).state;
    }
    else{ if(e instanceof Fator_Lista){
      msg += ((Fator_Lista)e).id + "(";
      //System.out.println(((Fator_Lista)e).id);
      int i=0;
      for (Exp le: ((Fator_Lista)e).lista){
        msg += catchExp(le);
        if(i < ((((Fator_Lista)e).lista).size()-1)){
          msg += ",";
        }
      }
      msg += ")";
    }
    }}}

    return msg;
  }

}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <FUNC: "function">

| <PRINT: "print">
| <WHILE: "while">
| <DO: "do">
| <IF: "if">
| <ELSE: "else"> // Funcao a mais
| <RETURN: "return">

| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <PONTOVIRGULA: ";">
| <VIRGULA: ",">

| <ATRIB: ":=">
| <ADD: "+">
| <SUB: "-">
| <MULT: "*">
| <DIV: "/">
| <AND: "&&">
| <OR: "||">
| <MAIOR: ">">
| <MENOR: "<">
| <IGUAL: "==">
| <DIFERENTE: "!=">
| <NOT: "!"> // Funcao a mais
| <MAIORIGUAL: ">="> // Funcao a mais
| <MENORIGUAL: "<="> // Funcao a mais

| <VAR: "var">
| <INT: "int">
| <FLOAT: "float">
| <BOOL: "bool">
| <VOID: "void">
| <TRUE: "true">
| <FALSE: "false">

}

TOKEN :
{
 <NUM : (["0"-"9"])+ ("E" (["+","-"])? ((["0"-"9"])+))?>
 |< ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])* ("_"(["a"-"z","A"-"Z","0"-"9"])+)*>
 |<FLOATNUM : (["0"-"9"])+ ("."( (["0"-"9"])+)) ("E" (["+","-"])? ((["0"-"9"])+))?>

}



// ANALISE LEXICA
void AnaliseLexica () :
{Token t;}
{

(
  <MAIN> { System.out.println("Palavra reservada: main");}
| <FUNC> { System.out.println("Palavra reservada: function");}

| <PRINT> { System.out.println("Palavra reservada: print");}
| <WHILE> { System.out.println("Palavra reservada: while");}
| <DO> { System.out.println("Palavra reservada: do");}
| <IF> { System.out.println("Palavra reservada: if");}
| <ELSE> { System.out.println("Palavra reservada: else");}
| <RETURN> { System.out.println("Palavra reservada: return");}

| <VAR> { System.out.println("Palavra reservada: var");}
| <INT> { System.out.println("Palavra reservada: int");}
| <FLOAT> { System.out.println("Palavra reservada: float");}
| <BOOL> { System.out.println("Palavra reservada: bool");}
| <VOID> { System.out.println("Palavra reservada: void");}

| <ACHAVES> { System.out.println("Abre chaves: {");}
| <FCHAVES> { System.out.println("Fecha chaves: }");}
| <APARENTESES> { System.out.println("Abre parenteses: (");}
| <FPARENTESES> { System.out.println("Fecha parenteses: )");}
| <PONTOVIRGULA> { System.out.println("Ponto e virgula: ;");}
| <VIRGULA> { System.out.println("Virgula: ,");}

| <ATRIB> { System.out.println("Atribuicao: :=");}
| <ADD> { System.out.println("Adicao: +");}
| <SUB> { System.out.println("Subtracao: -");}
| <MULT> { System.out.println("Multiplicacao: *");}
| <DIV> { System.out.println("Divisao: /");}
| <AND> { System.out.println("Operacao logica E: &&");}
| <OR> { System.out.println("Operacao logica OU: ||");}
| <NOT> { System.out.println("Operacao logica NAO: !");}
| <MAIOR> { System.out.println("Maior: >");}
| <MENOR> { System.out.println("Menor: <");}
| <IGUAL> { System.out.println("IGUAL: ==");}
| <DIFERENTE> { System.out.println("DIFERENTE: !=");}
| <MAIORIGUAL> { System.out.println("Maior/Igual: >=");}
| <MENORIGUAL> { System.out.println("Menor/Igual: <=");}

| t=<NUM> { System.out.println("Numero Inteiro: "+ t.image);}
| t=<FLOATNUM> { System.out.println("Numero Flutuante: "+ t.image);}
| t=<ID> { System.out.println("Identificador: "+ t.image);}
| <TRUE> { System.out.println("Booleano: true");}
| <FALSE> { System.out.println("Booleano: false");}
)*
<EOF> 


}
// FIM ANALISE LEXICA


// ANALISE SINTATICA
ArvoreLugosi Lugosi () :
{Main main; ArrayList<Func> func;}
{
  (main=MainLug()) func=ListFunc()
  <EOF> 
  {return new ArvoreLugosi(main, func);}
}

Main MainLug () :
{ArrayList<Vardecl> vardecl;ArrayList<Comandos> seqcom;}
{
  <MAIN> <ACHAVES> (vardecl=Vardecl()) (seqcom=SeqComandos()) <FCHAVES>
  {return new Main(vardecl, seqcom);}
}

ArrayList<Vardecl> Vardecl () :
{ArrayList<Vardecl> vardeclL = new ArrayList<Vardecl>(); Token tipo; Token id;}
{
  (<VAR> (tipo=Tipo()) (id=<ID>) <PONTOVIRGULA> {vardeclL.add(new Vardecl(tipo.image, id.image));})*
  {return vardeclL;}
}

Token Tipo () :
{Token t;}
{
  (t=<INT> {return t;})
  | (t=<BOOL> {return t;})
  | (t=<FLOAT> {return t;})
  | (t=<VOID> {return t;})
}

ArrayList<Comandos> SeqComandos () :
{Comandos com; ArrayList seqcom = new ArrayList<Comandos>();}
{
  (com = Comandos() {seqcom.add(com);})*
  {return seqcom;}
}

Comandos Comandos ():
{Token id; Exp e; ArrayList<Comandos> seqcom;}
{
  ((id=<ID>) <ATRIB> (e=Exp()) <PONTOVIRGULA> {return new Atribuicao(id.image,e);})
  | (<PRINT> <APARENTESES> (e=Exp()) <FPARENTESES> <PONTOVIRGULA> {return new Print(e);})
  | (<RETURN> (e=Exp()) <PONTOVIRGULA> {return new Return(e);})
  | (<IF> <APARENTESES> (e=Exp()) <FPARENTESES> <ACHAVES> (seqcom=SeqComandos()) <FCHAVES> <PONTOVIRGULA> {return new If(e, seqcom);})
  | (<WHILE> <APARENTESES> (e=Exp()) <FPARENTESES> <DO> <ACHAVES> (seqcom=SeqComandos()) <FCHAVES> <PONTOVIRGULA> {return new While(e, seqcom);})
  | (<DO> <ACHAVES> (seqcom=SeqComandos()) <FCHAVES> <WHILE> <APARENTESES> (e=Exp()) <FPARENTESES> <PONTOVIRGULA> {return new DoWhile(e, seqcom);})
}

Exp Exp ():
{Exp e1; Token op; Exp e2; Token val; ArrayList <Exp> listaexp;}
{
  (<APARENTESES> (e1=Exp()) (op=Op()) (e2=Exp()) <FPARENTESES> {return new Operation(e1,op.image,e2);})
  | (val=<ID> (<APARENTESES> listaexp=ListaExp() <FPARENTESES> {return new Fator_Lista(val.image, listaexp);})? {return new Fator_Id(val.image);})
  | (val=<NUM> {return new Fator_Num(val.image);})
  | (val=<FLOATNUM> {return new Fator_Num(val.image);})
  | (val=<TRUE> {return new Fator_Bool(val.image);})
  | (val=<FALSE> {return new Fator_Bool(val.image);})
}

ArrayList <Exp> ListaExp () :
{Exp exp; ArrayList<Exp> lista = new ArrayList<Exp>();}
{
  (exp=Exp() lista = ListaExpL())?
  {return lista;}
}

ArrayList <Exp> ListaExpL () :
{Exp exp; ArrayList<Exp> lista = new ArrayList<Exp>();}
{
  (<VIRGULA> (exp=Exp()) {lista.add(exp);})?
  {return lista;}
}

Token Op () :
{Token t;}
{
  (t=<ADD> {return t;})
  | (t=<SUB> {return t;})
  | (t=<MULT> {return t;})
  | (t=<DIV> {return t;})
  | (t=<AND> {return t;})
  | (t=<OR> {return t;})
  | (t=<IGUAL> {return t;})
  | (t=<DIFERENTE> {return t;})
  | (t=<MAIORIGUAL> {return t;})
  | (t=<MENORIGUAL> {return t;})
  | (t=<MAIOR> {return t;})
  | (t=<MENOR> {return t;})
}

ArrayList <Func> ListFunc () :
{ArrayList <Func> lista = new ArrayList<Func>(); Token tipo; Token id; ArrayList<ListaArg> listaarg; ArrayList<Vardecl> vardecl;ArrayList<Comandos> seqcom;}
{
  (<FUNC> (tipo=Tipo()) (id=<ID>) <APARENTESES> (listaarg=ListaArg()) <FPARENTESES> <ACHAVES> (vardecl=Vardecl()) (seqcom=SeqComandos()) <FCHAVES> {lista.add(new Func(tipo.image, id.image, listaarg, vardecl, seqcom));})*
  {return lista;}
}

ArrayList <ListaArg> ListaArg () :
{ArrayList <ListaArg> lista = new ArrayList <ListaArg>(); Token tipo; Token id;}
{
  ((tipo=Tipo()) (id=<ID>) (lista = ListaArgL()))?
  {return lista;}
}

ArrayList <ListaArg> ListaArgL () :
{ArrayList <ListaArg> lista = new ArrayList <ListaArg>(); Token tipo; Token id;}
{
  (<VIRGULA> (tipo=Tipo()) (id=<ID>) {lista.add(new ListaArg(tipo.image, id.image));})*
  {return lista;}
}