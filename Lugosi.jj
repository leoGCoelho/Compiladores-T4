// FUNCOES ADICIONADAS NAO REQUISITADAS: ELSE, >, <, !

PARSER_BEGIN(Lugosi)
import java.io.*;
import java.util.*;
  
  // CONSTRUCAO DA ARVORE
class ArvoreLugosi{
  Main main;
  //ArrayList<Func> func;

  ArvoreLugosi(Main m){
    this.main=m;
    //this.func=f;
  }
}
// FIM CONSTRUCAO DA ARVORE

// MAIN
class Main{
  ArrayList <Vardecl> vardecl;

  Main(ArrayList<Vardecl> v){
    this.vardecl=v;
  }
}
// FIM MAIN

// VARDECL
class Vardecl{
  String tipo;
  String var;

  Vardecl(String t, String v){
    this.tipo = t;
    this.var = v;
  }
}
//FIM VARDECL



public class Lugosi {
  
  public static void main(String args[]) throws Exception{
    // abrir o arquivo passado por linha
    // de comando contento o código em Lugosi:
    FileInputStream fs = new FileInputStream(new File(args[0]));

    // Instanciar o parser da linguagem Lugosi passando
    // como argumento o arquivo contendo o código
    //Lugosi a ser processado:
    Lugosi parser = new Lugosi(fs);

    // Chamar a primeira regra do parser que irá
    // analisar o código e devolver a árvore sintática
    ArvoreLugosi arvore =parser.Lugosi();
    pprint(arvore);

    // passar a árvore para o gerador de código
    // que deve gerar um arquivo .java com o mesmo
    //nome do arquivo de entrada
    //geraCodigo(arvore, args[0]);
  }
  //public static void geraCodigo(ArvoreLugosi prog, String arquivo){??????}

  public static void pprint (ArvoreLugosi prog){
      if(prog instanceof ArvoreLugosi){
         System.out.print("main");
         System.out.println("{ ");

        for(Vardecl varD: prog.main.vardecl){
            System.out.print("var ");
            System.out.print(varD.tipo + " ");
            System.out.print(varD.var);
            System.out.println(";");
        }
        /*System.out.print(" ");
        pSeqComandos(prog.main.seqComandos);
        System.out.println("}"); 
        for(Func funcao: prog.funcao){
            pFunc(funcao);
        } */
        System.out.println("}");
       }
  }
}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <FUNC: "function">

| <PRINT: "print">
| <WHILE: "while">
| <DO: "do">
| <IF: "if">
| <ELSE: "else"> // Funcao a mais
| <RETURN: "return">

| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <PONTOVIRGULA: ";">
| <VIRGULA: ",">

| <ATRIB: ":=">
| <ADD: "+">
| <SUB: "-">
| <MULT: "*">
| <DIV: "/">
| <AND: "&&">
| <OR: "||">
| <MAIOR: ">">
| <MENOR: "<">
| <IGUAL: "==">
| <DIFERENTE: "!=">
| <NOT: "!"> // Funcao a mais
| <MAIORIGUAL: ">="> // Funcao a mais
| <MENORIGUAL: "<="> // Funcao a mais

| <VAR: "var">
| <INT: "int">
| <FLOAT: "float">
| <BOOL: "bool">
| <VOID: "void">
| <TRUE: "true">
| <FALSE: "false">

}

TOKEN :
{
 <NUM : (["0"-"9"])+ ("E" (["+","-"])? ((["0"-"9"])+))?>
 |< ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])* ("_"(["a"-"z","A"-"Z","0"-"9"])+)*>
 |<FLOATNUM : (["0"-"9"])+ ("."( (["0"-"9"])+)) ("E" (["+","-"])? ((["0"-"9"])+))?>

}



// ANALISE LEXICA
void AnaliseLexica () :
{Token t;}
{

(
  <MAIN> { System.out.println("Palavra reservada: main");}
| <FUNC> { System.out.println("Palavra reservada: function");}

| <PRINT> { System.out.println("Palavra reservada: print");}
| <WHILE> { System.out.println("Palavra reservada: while");}
| <DO> { System.out.println("Palavra reservada: do");}
| <IF> { System.out.println("Palavra reservada: if");}
| <ELSE> { System.out.println("Palavra reservada: else");}
| <RETURN> { System.out.println("Palavra reservada: return");}

| <VAR> { System.out.println("Palavra reservada: var");}
| <INT> { System.out.println("Palavra reservada: int");}
| <FLOAT> { System.out.println("Palavra reservada: float");}
| <BOOL> { System.out.println("Palavra reservada: bool");}
| <VOID> { System.out.println("Palavra reservada: void");}

| <ACHAVES> { System.out.println("Abre chaves: {");}
| <FCHAVES> { System.out.println("Fecha chaves: }");}
| <APARENTESES> { System.out.println("Abre parenteses: (");}
| <FPARENTESES> { System.out.println("Fecha parenteses: )");}
| <PONTOVIRGULA> { System.out.println("Ponto e virgula: ;");}
| <VIRGULA> { System.out.println("Virgula: ,");}

| <ATRIB> { System.out.println("Atribuicao: :=");}
| <ADD> { System.out.println("Adicao: +");}
| <SUB> { System.out.println("Subtracao: -");}
| <MULT> { System.out.println("Multiplicacao: *");}
| <DIV> { System.out.println("Divisao: /");}
| <AND> { System.out.println("Operacao logica E: &&");}
| <OR> { System.out.println("Operacao logica OU: ||");}
| <NOT> { System.out.println("Operacao logica NAO: !");}
| <MAIOR> { System.out.println("Maior: >");}
| <MENOR> { System.out.println("Menor: <");}
| <IGUAL> { System.out.println("IGUAL: ==");}
| <DIFERENTE> { System.out.println("DIFERENTE: !=");}
| <MAIORIGUAL> { System.out.println("Maior/Igual: >=");}
| <MENORIGUAL> { System.out.println("Menor/Igual: <=");}

| t=<NUM> { System.out.println("Numero Inteiro: "+ t.image);}
| t=<FLOATNUM> { System.out.println("Numero Flutuante: "+ t.image);}
| t=<ID> { System.out.println("Identificador: "+ t.image);}
| <TRUE> { System.out.println("Booleano: true");}
| <FALSE> { System.out.println("Booleano: false");}
)*
<EOF> 


}
// FIM ANALISE LEXICA


// ANALISE SINTATICA
ArvoreLugosi Lugosi () :
{Main main;}
{
  (main=MainLug())
  <EOF> 
  {return new ArvoreLugosi(main);}
}

Main MainLug () :
{ArrayList<Vardecl> vardecl;}
{
  <MAIN> <ACHAVES> (vardecl=Vardecl()) <FCHAVES>
  {return new Main(vardecl);}
}

ArrayList<Vardecl> Vardecl () :
{ArrayList<Vardecl> vardeclL = new ArrayList<Vardecl>(); Token tipo; Token id;}
{
  (<VAR> (tipo=<INT>) (id=<ID>) <PONTOVIRGULA> {vardeclL.add(new Vardecl(tipo.image, id.image));})*
  {return vardeclL;}
}

